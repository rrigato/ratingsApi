---
AWSTemplateFormatVersion: '2010-09-09'

#Transforms any serverless code to cloudformation
Transform: AWS::Serverless-2016-10-31

Description:
  'Television ratings api built with an api gateway frontend as a lambda proxy'

Parameters:
  dynamoDbTableName:
    Type: String
    Default: 'prod_toonami_ratings'
    Description: Name of the dynamodb table
    
  ProjectName:
    Type: String
    Default: 'ratingsapi'
    Description: Name of the project

  EnvironPrefix:
    Type: String
    Default: dev
    Description: String for prefixing resources to differentiate prod/dev

Resources:

  ProjectBucket:
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256    
      BucketName: !Sub '${EnvironPrefix}-${ProjectName}-openapi-dependency'
    Type: "AWS::S3::Bucket"


  ratingsApiGw:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}Api${EnvironPrefix}'
      Description: API used for television ratings

  ratingsVersionPathParamResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ratingsApiGw
      ParentId: !GetAtt ratingsApiGw.RootResourceId
      PathPart: '{versionNumber}'

  ratingsVersionPathParamMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ratingsApiGw
      ResourceId: !Ref ratingsVersionPathParamResource
      HttpMethod: GET
      AuthorizationType: NONE

  ratingsDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn: ratingsVersionPathParamMethod
    Properties:
      RestApiId: !Ref ratingsApiGw
      Description: Single stage deployment
      StageName: api


  ratingsUsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    DependsOn: ratingsDeployment
    Properties:
      ApiStages:
        - ApiId: !Ref ratingsApiGw
          Stage: api
      Description: Generic Usage plan
      Quota:
        Limit: 1000
        Period: MONTH
      Throttle:
        BurstLimit: 200
        RateLimit: 100
      UsagePlanName: all_clients

  # ratingsShowsProxyResource:
  #   Type: 'AWS::ApiGateway::Resource'
  #   Properties:
  #     RestApiId: !Ref ratingsApiGw
  #     ParentId: !Ref ratingsVersionPathParamResource
  #     PathPart: '{proxy}'

  # ratingsShowsProxyMethod:
  #   Type: 'AWS::ApiGateway::Method'
  #   Properties:
  #     RestApiId: !Ref ratingsApiGw
  #     ResourceId: !Ref ratingsShowsProxyResource
  #     HttpMethod: GET
  #     AuthorizationType: NONE
  #     Integration:
  #       Type: AWS_PROXY
  #       IntegrationHttpMethod: POST
  #       Uri: !Sub >-
  #         arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${showsEndpoint.Arn}/invocations


  apiGatewayInvokeLambda:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub '${ProjectName}LambdaPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: LambdaAccess
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:GetFunctionConfiguration
                Resource: '*'
                  #- !GetAtt 'LambdaFunction.Arn'
  showsEndpoint:
    Type: AWS::Serverless::Function
    Properties:                               
      Description: |
        Lambda function to handle shows endpoint
      #passed to os.environ for python used to
      #determine which table to update in scripts.reddit_ratings.main
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref dynamoDbTableName

      FunctionName: !Sub '${ProjectName}-shows-endpoint-${EnvironPrefix}'
      Handler: index.handler

      #Policies to include in the lambda basic execution role
      #created by SAM
      Policies:
        Version: '2012-10-17'
        Statement: 
          #dynamodb permissions     
          - Sid: !Sub '${ProjectName}LambdaDynamoDbAllow'
            Effect: Allow
            Action:
              - dynamodb:ListTables
              - dynamodb:GetItem

            Resource:
              - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${dynamoDbTableName}'       

      Runtime: python3.7
      Tracing: Active
      #60 second timeout
      Timeout: 5
      #Default code that will be updated by
      #CodeBuild Job
      InlineCode: |
        def handler(event, context):
          print("Hello, world!")
    Tags:
      -
        Key: keep
        Value: 'yes'
      -
        Key: source
        Value: !Ref ProjectName


