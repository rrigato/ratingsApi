############################
#Television ratings api built with an api gateway frontend as a lambda proxy
#
#1) Runs the cloudformation template to create dev environment
#
#
############################
version: 0.2

phases:
  ###########################################
  #Uses a python runtime
  #Note that you do not need the \ to escape
  #aws cli commands
  ###########################################
  install:
    runtime-versions:
       python: 3.8

    commands:
      - echo Entered the install phase...
      - BUILD_ENVIRONMENT=dev-ratingsapi
      - APIGW_STACK="${BUILD_ENVIRONMENT}-apigw"
      - PROJECT_NAME=ratingsapi     
      - pip install -r tests/requirements_dev.txt
  build:
    commands:
      - echo Defined build variables
      - echo $BUILD_ENVIRONMENT
      - echo $APIGW_STACK



      
      - echo "Creating $APIGW_STACK"
      - aws cloudformation create-stack --stack-name $APIGW_STACK
          --template-body file://templates/api_s3_bucket.yml
          --capabilities CAPABILITY_AUTO_EXPAND CAPABILITY_NAMED_IAM
          --tags Key=source,Value=$PROJECT_NAME
          
      #Waits until the stack has been successfully created
      - aws cloudformation wait stack-create-complete
        --stack-name $APIGW_STACK

      - cd microservices

      - for lambda_code in */ ; do 
        - if [[ -d "$lambda_code" && ! -L "$lambda_code" ]]; then
          #shows/ to shows
          - clean_function_name="${lambda_code%/}"
          - echo "$clean_function_name is a directory"; 
        - fi; 
      - done

      # - aws cloudformation create-stack --stack-name $APIGW_STACK
      #     --template-body file://templates/api_s3_bucket.yml
      #     --capabilities CAPABILITY_NAMED_IAM

      # - aws s3 cp templates/openapi3_spec.yml "s3://${BUILD_ENVIRONMENT}/v1"

      # #Waits until the stack has been successfully created
      # - aws cloudformation wait stack-create-complete
      #   --stack-name $APIGW_STACK

      #run tests after stack has built
      - python -m unittest tests.test_dev_aws_resources 


  post_build:
    commands:
      - echo cleaning up resources

      - aws cloudformation delete-stack --stack-name $APIGW_STACK


artifacts:
  files:
    ##########################
    #Adds artifact that can be referenced in later stages from 
    #${CODEBUILD_SRC_DIR_BuildDevratingsapi}
    ##########################
    - 'logs/*'
  name: 'BuildDevratingsapi'
