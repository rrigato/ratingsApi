############################
#Television ratings api built with an api gateway frontend as a lambda proxy
#
#1) Runs the cloudformation template to create dev environment
#
#
############################
version: 0.2
env: 
  shell: bash
phases:
  ###########################################
  #Uses a python runtime
  #Note that you do not need the \ to escape
  #aws cli commands
  ###########################################
  install:
    runtime-versions:
       python: 3.8

    commands:
      - echo Entered the install phase...
      - ENVIRON_PREFIX=dev
      - PROJECT_NAME=ratingsapi       
      - APIGW_STACK="${ENVIRON_PREFIX}-${PROJECT_NAME}-apigw"    
      - pip install -r tests/requirements_dev.txt
  build:
    commands:
      - echo Defined build variables
      - echo $BUILD_ENVIRONMENT
      - echo $APIGW_STACK



      
      - echo "Creating $APIGW_STACK"
      - aws cloudformation create-stack --stack-name $APIGW_STACK
          --template-body file://templates/api_s3_bucket.yml
          --capabilities CAPABILITY_AUTO_EXPAND CAPABILITY_NAMED_IAM
          --tags Key=source,Value=$PROJECT_NAME
          
      #Waits until the stack has been successfully created
      - aws cloudformation wait stack-create-complete
        --stack-name $APIGW_STACK

      - cd microservices

      - for lambda_code in */ ; do 
      -   if [[ -d "$lambda_code" && ! -L "$lambda_code" ]]; then
      #shows/ to shows
      -     endpoint_name="${lambda_code%/}"
      -     echo "Updating lambda function ${endpoint_name} "; 

      -     cd $endpoint_name
      #create deployment archive
      -     zip -r9 "${endpoint_name}.zip" .

      #updates zip deployment package
      -     aws lambda update-function-code
            --function-name "${PROJECT_NAME}-${endpoint_name}-endpoint-${ENVIRON_PREFIX}"
            --zip-file "fileb://${endpoint_name}.zip"

      #changes lambda handler to shows.lambda_handler
      -     aws lambda update-function-configuration
            --function-name "${PROJECT_NAME}-${endpoint_name}-endpoint-${ENVIRON_PREFIX}"
            --handler "${endpoint_name}.lambda_handler"
            --runtime python3.8

      -     mv "${endpoint_name}.zip" ..
      
      -     cd ..

      #lambda function name
      -     echo "${PROJECT_NAME}-${endpoint_name}-endpoint-${ENVIRON_PREFIX}"
      -   fi; 
      - done

      - cd ..
      # - aws cloudformation create-stack --stack-name $APIGW_STACK
      #     --template-body file://templates/api_s3_bucket.yml
      #     --capabilities CAPABILITY_NAMED_IAM

      # - aws s3 cp templates/openapi3_spec.yml "s3://${ENVIRON_PREFIX}-${PROJECT_NAME}/v1"

      # #Waits until the stack has been successfully created
      # - aws cloudformation wait stack-create-complete
      #   --stack-name $APIGW_STACK

      #run tests after stack has built
      - python -m unittest tests.test_dev_aws_resources 


  post_build:
    commands:
      - echo cleaning up resources

      - aws cloudformation delete-stack --stack-name $APIGW_STACK


artifacts:
  files:
    ##########################
    #Adds artifact that can be referenced in later stages from 
    #${CODEBUILD_SRC_DIR_BuildDevratingsapi}
    ##########################
    - 'logs/*'
  name: 'BuildDevratingsapi'
